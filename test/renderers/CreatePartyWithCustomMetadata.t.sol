// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.20;

import { SetupPartyHelper } from "../utils/SetupPartyHelper.sol";
import { Party } from "../../contracts/party/Party.sol";
import { MetadataProvider } from "../../contracts/renderers/MetadataProvider.sol";
import { BasicMetadataProvider } from "../../contracts/renderers/BasicMetadataProvider.sol";
import { PartyNFTRenderer } from "../../contracts/renderers/PartyNFTRenderer.sol";

contract CreatePartyWithCustomMetadataTest is SetupPartyHelper {
    MetadataProvider metadataProvider;
    BasicMetadataProvider basicMetadataProvider;

    constructor() SetupPartyHelper(false) {}

    function setUp() public override {
        super.setUp();

        metadataProvider = new MetadataProvider(globals);
        basicMetadataProvider = new BasicMetadataProvider(globals);
    }

    function test_createParty_withCustomMetadata() public {
        address[] memory authorities = new address[](1);
        authorities[0] = address(this);

        Party.PartyOptions memory opts;
        address[] memory hosts = new address[](1);
        hosts[0] = address(420);
        opts.name = "PARTY";
        opts.symbol = "PR-T";
        opts.governance.hosts = hosts;
        opts.governance.voteDuration = 99;
        opts.governance.executionDelay = 1000;
        opts.governance.passThresholdBps = 1000;
        opts.governance.totalVotingPower = johnVotes + dannyVotes + steveVotes + thisVotes;

        bytes
            memory metadataEncoded = hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001c666c697070656420616e642077617270656420746f61642063726577000000000000000000000000000000000000000000000000000000000000000000000053576527726520737570706f7274696e672074686520666c697070656420616e642077617270656420746f61642065636f73797374656d2e20204c6574277320676f206765742027656d2c20667269656e64732e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d553573594778587679656b5265777a344238427662356538786174426e4d564c5a507246386d706934617350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c666c697070656420616e642077617270656420746f61642063726577000000000000000000000000000000000000000000000000000000000000000000000053576527726520737570706f7274696e672074686520666c697070656420616e642077617270656420746f61642065636f73797374656d2e20204c6574277320676f206765742027656d2c20667269656e64732e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        PartyNFTRenderer.Metadata memory decodedMetadataStart = abi.decode(
            metadataEncoded,
            (PartyNFTRenderer.Metadata)
        );

        uint256 gas = gasleft();

        party = partyFactory.createPartyWithMetadata(
            partyImpl,
            authorities,
            opts,
            preciousTokens,
            preciousTokenIds,
            0,
            basicMetadataProvider,
            metadataEncoded
        );

        emit log_named_uint("gas used", gas - gasleft());

        bytes memory metadata = basicMetadataProvider.getMetadata(address(party), 0);

        PartyNFTRenderer.Metadata memory decodedMetadata = abi.decode(
            metadata,
            (PartyNFTRenderer.Metadata)
        );
    }
}
