// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8;

import "forge-std/Test.sol";

import "../../contracts/crowdfund/AuctionCrowdfund.sol";
import "../../contracts/gatekeepers/AllowListGateKeeper.sol";
import "../../contracts/globals/Globals.sol";
import "../../contracts/globals/LibGlobals.sol";
import "../../contracts/renderers/CrowdfundNFTRenderer.sol";
import "../../contracts/renderers/fonts/PixeldroidConsoleFont.sol";
import "../../contracts/utils/Proxy.sol";
import "../../contracts/utils/EIP165.sol";

import "../DummyERC721.sol";
import "../TestUtils.sol";

import "./MockPartyFactory.sol";
import "./MockParty.sol";
import "./TestableCrowdfund.sol";

contract BadETHReceiver is ERC721Receiver {
    // Does not implement `receive()`.
    // But can still receive NFT.
}

contract BadERC721Receiver {
    // Does not implement `onERC721Received()`.
    // But can still receive ETH.
    receive() external payable {}
}

contract CrowdfundTest is Test, TestUtils {
    event MockPartyFactoryCreateParty(
        address caller,
        address authority,
        Party.PartyOptions opts,
        IERC721[] preciousTokens,
        uint256[] preciousTokenIds
    );

    event MockMint(
        address caller,
        address owner,
        uint256 amount,
        address delegate
    );

    event Contributed(address contributor, uint256 amount, address delegate, uint256 previousTotalContributions);
    event Burned(address contributor, uint256 ethUsed, uint256 ethOwed, uint256 votingPower);

    string defaultName = 'Party of the Living Dead';
    string defaultSymbol = 'ACF';
    uint40 defaultDuration = 60 * 60;
    uint96 defaultMaxBid = 10e18;
    address payable defaultSplitRecipient = payable(0);
    uint16 defaultSplitBps = 0.1e4;
    address defaultInitialDelegate;
    IGateKeeper defaultGateKeeper;
    bytes12 defaultGateKeeperId;
    Crowdfund.FixedGovernanceOpts defaultGovernanceOpts;

    Globals globals = new Globals(address(this));
    MockPartyFactory partyFactory = new MockPartyFactory();
    MockParty party;

    constructor() {
        globals.setAddress(LibGlobals.GLOBAL_PARTY_FACTORY, address(partyFactory));
        party = partyFactory.mockParty();
        defaultGovernanceOpts.hosts.push(_randomAddress());
        defaultGovernanceOpts.hosts.push(_randomAddress());
        defaultGovernanceOpts.hosts.push(_randomAddress());
        defaultGovernanceOpts.voteDuration = 1 days;
        defaultGovernanceOpts.executionDelay = 0.5 days;
        defaultGovernanceOpts.passThresholdBps = 0.51e4;

        // Upload font on-chain
        PixeldroidConsoleFont font = new PixeldroidConsoleFont(address(this));
        font.saveFile(
            0,
            "data:font/ttf;charset=utf-8;base64,"
        );
        font.saveFile(
            1,
            ""
        );

        RendererStorage nftRendererStorage = new RendererStorage(address(this));
        CrowdfundNFTRenderer nftRenderer = new CrowdfundNFTRenderer(globals, nftRendererStorage, font);
        globals.setAddress(LibGlobals.GLOBAL_CF_NFT_RENDER_IMPL, address(nftRenderer));

        // Upload URI file chunks
        nftRendererStorage.saveFile(
            0,
            ')}</style><path d="M331 1H31C14.431 1 1 14.431 1 31v480c0 16.569 13.431 30 30 30h300c16.569 0 30-13.431 30-30V31c0-16.569-13.431-30-30-30Z" fill="url(#B)" stroke="url(#C)" stroke-width="2" stroke-miterlimit="10"/><g fill="#00c1fa"><path d="M240.24 400.83h3.03c1.7 0 2.82.99 2.82 2.55 0 2.1-1.27 3.32-3.57 3.32h-1.97l-.71 3.3h-1.56l1.96-9.17zm2.34 4.38c1.24 0 1.88-.58 1.88-1.68 0-.73-.49-1.2-1.48-1.2h-1.51l-.6 2.88h1.71zm3.57 1.85c0-2.27 1.44-3.83 3.57-3.83 1.82 0 3.06 1.25 3.06 3.09 0 2.28-1.43 3.83-3.57 3.83-1.82 0-3.06-1.25-3.06-3.09zm3.13 1.74c1.19 0 1.93-1.02 1.93-2.52 0-1.06-.62-1.69-1.56-1.69-1.19 0-1.93 1.02-1.93 2.52 0 1.06.62 1.69 1.56 1.69zm4.74-5.41h1.49l.28 4.72 2.25-4.72h1.64l.23 4.77 2.25-4.77h1.56l-3.3 6.61h-1.62l-.25-5.04-2.42 5.04h-1.63l-.48-6.61z"/><use xlink:href="#H"/><path d="M271.72 403.39h1.55l-.28 1.28c.41-.85 1.16-1.38 2.17-1.38.22 0 .42.02.6.08l-.35 1.46c-.18-.06-.44-.1-.78-.1-1.12 0-1.8.72-2.04 1.77l-.74 3.48h-1.55l1.42-6.61v.02z"/><use xlink:href="#H" x="12.07"/><path d="M282.58 407.34c0-2.43 1.36-4.1 3.26-4.1 1 0 1.76.53 2.05 1.31l.79-3.72h1.55l-1.96 9.17h-1.55l.2-.92c-.4.66-1.04 1.08-1.92 1.08-1.49 0-2.43-1.18-2.43-2.82h.01zm3 1.51c.88 0 1.51-.58 1.73-1.56l.17-.82c.24-1.1-.31-1.93-1.36-1.93-1.19 0-1.94 1.08-1.94 2.59 0 1.05.55 1.71 1.4 1.71v.01zm9.6-.01-.25 1.16h-1.55l1.96-9.17h1.55l-.73 3.46c.44-.66 1.16-1.05 1.99-1.05 1.49 0 2.35 1.16 2.35 2.76 0 2.52-1.36 4.16-3.21 4.16-.98 0-1.81-.53-2.1-1.32h-.01zm1.83.01c1.16 0 1.87-1.06 1.87-2.62 0-1.04-.5-1.69-1.39-1.69s-1.52.56-1.73 1.55l-.17.79c-.24 1.14.34 1.97 1.42 1.97zm5.68 1.16-1.04-6.62h1.52l.66 4.75 2.66-4.75h1.69l-5.31 9.13h-1.73l1.55-2.51zm23.48-6.8c-.23 1.18-.62 3.36-.75 6.01 2.37 1.21 4.45 1.96 5.58 2.35 1.13-.39 3.22-1.14 5.58-2.35-.14-2.65-.53-4.83-.75-6.01a43.74 43.74 0 0 0-4.83-3.66 42.506 42.506 0 0 0-4.83 3.66zm13.07-7.95s.82-.29 1.76-.45c-2.54-2.28-5.87-3.7-9.53-3.81.66.71 1.28 1.67 1.84 2.75 1.84.22 4.07.7 5.92 1.51h.01zm-2.71 18.36c-2.06-.4-4.05-.97-5.53-1.51a38.65 38.65 0 0 1-5.53 1.51c.12 1.5.35 3.04.76 4.58 0 0 1.54 1.82 4.78 2.8 3.23-.98 4.78-2.8 4.78-2.8.4-1.53.64-3.08.76-4.58h-.02zm-13.77-18.37c1.85-.81 4.08-1.28 5.93-1.51.56-1.09 1.18-2.04 1.84-2.75-3.66.11-6.98 1.54-9.53 3.81.95.16 1.76.45 1.76.45zm-4.72 8.77c1.12 1.12 2.35 2.09 3.58 2.94 1.37-1.58 2.86-3.02 4.08-4.04.27-1.56.77-3.57 1.46-5.55-1.36-.65-2.81-1.22-4.34-1.63 0 0-2.35.42-4.81 2.74-.77 3.29.04 5.54.04 5.54h-.01zm25.92 0s.81-2.25.04-5.54c-2.46-2.31-4.81-2.74-4.81-2.74-1.53.42-2.99.99-4.34 1.63.68 1.98 1.19 3.99 1.46 5.55 1.21 1.01 2.7 2.45 4.08 4.04 1.24-.85 2.46-1.83 3.58-2.94h-.01zm-26.38.2s-.66-.56-1.27-1.3c-.7 3.34-.27 6.93 1.46 10.16.28-.93.8-1.94 1.46-2.97-.73-1.71-1.43-3.88-1.66-5.88l.01-.01zm8.24 14.27c-1.63-1.2-3.15-2.89-4.27-4.38-1.22.06-2.36 0-3.3-.22 1.93 3.11 4.82 5.28 8.07 6.34-.34-.9-.5-1.75-.5-1.75v.01zm18.6-14.27s.66-.56 1.27-1.3c.7 3.34.27 6.93-1.46 10.16-.28-.93-.8-1.94-1.46-2.97.73-1.71 1.43-3.88 1.66-5.88l-.01-.01zm-8.24 14.27c1.63-1.2 3.15-2.89 4.27-4.38 1.22.06 2.36 0 3.3-.22a14.914 14.914 0 0 1-8.07 6.34c.34-.9.5-1.75.5-1.75v.01zM331 392.83l-4.12 2.45 1.26 3.91h5.72l1.26-3.91-4.12-2.45zm-11.4 19.74 4.18 2.35 2.75-3.05-2.86-4.95-4.02.86-.06 4.79h.01zm22.79 0-.06-4.79-4.02-.86-2.86 4.95 2.75 3.05 4.18-2.35h.01z"/></g><path d="M308.54 128.19c2.23 2.13 9.81 23.93-1.54 56.42-2.62-2.98-5.47-5.98-8.52-9.01 6.58-14.64 11.75-31.59 10.05-47.41h.01zm-59.07-68.13c19.25 52.08-33.89 116.63-48.05 132.17l5.25 15.07c28.45-30.16 75.83-100.73 42.79-147.24h.01zm-59.24 175.15c-12.57 10.1-26.02 18.91-40 25.97l17.58 6.07c13.75-7.12 26.89-16.2 39.03-26.6-5.99-1.81-11.33-3.53-16.61-5.44zm81.35 21.49c-12.74 13.43-26.87 25.59-41.9 35.94 4.21 3.38 8.21 6.37 11.97 8.91l4.07-2.78a259.485 259.485 0 0 0 35.1-32.86l-9.22-9.2-.02-.01zm-133.69.23c14.84-6.44 29.13-15.2 42.38-25.55-4.53-1.85-9.29-3.94-14.65-6.41-11.15 8.43-22.65 15.53-34.06 21.06-3.5 1.81-7.04 3.5-10.6 5.07l16.91 5.83h.02zM327.25 150.6c-.06 15.08-5.71 30.79-12.03 44.27 2.35 3.22 4.47 6.41 6.3 9.55 10.53-28.27 12.04-43.96 5.71-53.81l.02-.01zm-65.4-80.13c35.47 46.42-30.24 125.73-51.91 147.16 1.47 4.85 2.92 10 4.56 16.16 19.74-19.48 98.57-111.61 47.34-163.31l.01-.01zm18.4 88.96c3.12 2.48 6.16 5.01 9.07 7.59 11.63-33.33 2.97-52.2.87-53.67 1.24 15.44-3.65 31.81-9.94 46.07v.01zm-15.09 91.04c-1.97-6.65-4.46-16.9-4.46-16.9-15.83 18.14-34.33 34.27-54.28 47.06 8.77 3.05 16.46 6.38 16.46 6.38 15.39-10.22 29.72-22.76 42.28-36.54zm-6.52-29.51-3.15-19.36c-24.69 30.64-47.69 52.28-76.91 69.38l17.48 6.05c23.83-14.19 45.49-34.09 62.59-56.07h-.01zm-78.37 93.2c8.68 5.69 25.08 8.22 36.42 2.39 11.69-7.45-1.16-16.17-15.52-19.14-19-3.93-32.58 2.36-25.98 12.03.79 1.15 2.31 2.91 5.07 4.72m-3.57.77c-6.91-4.6-13.12-13.96-.44-19.54 20.17-6.65 55.01 6.2 48.43 17.86-1.14 2.01-2.82 3.1-4.61 4.25h-.02v.02h-.03v.02h-.03v.02h-.03v.02h-.03v.02h-.02c-13.64 7.05-33.06 4.1-43.22-2.65m10.63-7.48c.48.36 4.83 3.44 9.81.96l2.61-1.44-9.07-4.62-2.86 1.53c-.74.42-2.97 1.71-.49 3.56m-3.29 1.14c-4.56-3.05-1.5-5.06-.04-6.03 2.12-1.1 4.23-2.23 6.36-3.43 13.46 7.1 13.99 7.38 25.56 11.95l-2.67 1.58-12.43-5.19 5.62 8.99-3.25 1.69-4.78-8.32c-6.18 3.99-13.55-.7-14.37-1.25" fill="url(#D)"/><path d="M310.28 103.41C280.02 48.51 233.39 31 202.68 31c-23.1 0-50.31 11.2-71.38 25.52 18.48 8.49 42.36 30.93 42.66 31.21-15.38-5.9-34.54-13.03-64.39-15.25-13.7 11.45-26.77 24.71-38.3 39.5 1.48 14.84 5.58 30.39 5.58 30.39-12.16-9.2-21.36-8.93-34.87 18.31-10.45 24.52-13.43 46.98-9.01 64.29 0 0 9.14 51.93 70.2 77.64-2.52-8.93-3.06-19.21-1.81-30.48-10.91-5.41-21.09-11.81-30.28-19.12 1.54-12.81 5.41-26.79 11.62-41.39 8.56-20.65 8.42-29.35 8.42-29.43.06.13 10.63 24.09 25.1 42.78 8.2-17.13 18.33-31.15 26.5-42.29l-7.3-13.08c10.81-13.35 22.71-25.61 35.24-36.34l13.24 6.94c16.83-14.09 37.29-27.21 59.21-35.44-13.57-22.26-31.04-37.34-31.04-37.34s53.67 5.31 81.42 30.4c6.31 1 11.89 2.89 16.76 5.59h.03zM57.32 210.27c-2.62 8.48-4.41 16.6-5.31 24.25-4.77-5.59-8.74-11.36-11.99-17.13.9-7.48 2.62-15.33 5.14-23.44 3.43-10.28 6.49-11.46 11.35-4.33v-.09c4.14 5.95 3.52 11.9.81 20.74zm64.16-68.44-.09.09c-6.76-14.43-9.1-19.66-15.05-35.08l.27-.27c15.95 5.32 20.63 7.04 35.95 13.52-7.3 6.77-14.42 14.06-21.09 21.73l.01.01zm106.25-91.8c-8.56 1.35-17.49 3.79-26.5 7.21-5.04-3.96-10.1-7.39-15.14-10.28 8.66-3.25 17.13-5.59 25.23-6.85 2.97-.36 12.07-1.54 20.01 4.69v-.09c4.77 3.69.27 4.6-3.6 5.32z" fill="url(#E)"/><path d="M331 436H31c-8.284 0-15 6.716-15 15v60c0 8.284 6.716 15 15 15h300c8.284 0 15-6.716 15-15v-60c0-8.284-6.716-15-15-15z" fill="#a7b8cf"/><path d="M331 436a15.01 15.01 0 0 1 15 15v60a15.01 15.01 0 0 1-15 15H31a15.01 15.01 0 0 1-15-15v-60a15.01 15.01 0 0 1 15-15h300zm0-1H31c-8.82 0-16 7.18-16 16v60c0 8.82 7.18 16 16 16h300c8.82 0 16-7.18 16-16v-60c0-8.82-7.18-16-16-16z" fill="url(#F)"/><path d="M31 486v20a5 5 0 0 0 5 5h80a5 5 0 0 0 5-5v-20a5 5 0 0 0-5-5H36a5 5 0 0 0-5 5z" fill="'
        );
        nftRendererStorage.saveFile(
            1,
            '"/><path d="M59.77 502.5v-12.01h2.36v9.83h4.29v2.18h-6.65zm8.639 0v-12.01h2.34v12.01h-2.34zm3.571-12.01h2.45l2.14 7.49.38 1.51.2 1.3h.14l.18-1.3.38-1.51 2.14-7.49h2.45l-3.71 12.01h-3.04l-3.71-12.01zm12.11 12.01v-12.01h7.69v2.23h-5.33v2.72h5.33v2.11h-5.33v2.93h5.31v2.02h-7.67z" fill="#a7b8cf"/><path fill="#91a6c3" d="M31 445h299v27H31z"/><path d="M31 451h3m-3 0v3m0-3v-3m3 3v3m0-3h3m-3 0v-3m0 6h-3m3 0v3m0-3h3m-6 0v3m0 0h3m-3 0v3m3-3v3m0-3h3m-6 3h3m-3 0v3m3-3v3m0-3h3m-6 3h3m-3 0v3m3-3v3m0-3h3m-6 3h3m-3 0v3m3-3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3h3m-3 0v-3m0 6v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3v3m0-3h3m-3 3h3m-3 0v3m3-18v3m0-3v-3m0 6v3m-300-9h3m-3 0v-3h3m0 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3h3m-3 0v-3m3 3v-3h-3m-294 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m3 12v3m0 0v3m0 0v3m0 0v3m-300 0h3m-3 0v3h3m0-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3h3m-3 0v3m3-3v3h-3m-294 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3m0 0h3" stroke="#a7b8cf" stroke-width=".15" stroke-miterlimit="10"/><path d="M136 486v20a5 5 0 0 0 5 5h80a5 5 0 0 0 5-5v-20a5 5 0 0 0-5-5h-80a5 5 0 0 0-5 5z" fill="'
        );
    }

    function _createTokens(address owner, uint256 count)
        private
        returns (IERC721[] memory tokens, uint256[] memory tokenIds)
    {
        tokens = new IERC721[](count);
        tokenIds = new uint256[](count);
        for (uint256 i = 0; i < count; ++i) {
            DummyERC721 t = new DummyERC721();
            tokens[i] = IERC721(t);
            tokenIds[i] = t.mint(owner);
        }
    }

    function _createCrowdfund(
        uint256 initialContribution,
        address initialContributor,
        address initialDelegate
    )
        private
        returns (TestableCrowdfund cf)
    {
        cf = TestableCrowdfund(payable(new Proxy{ value: initialContribution }(
            Implementation(new TestableCrowdfund(globals)),
            abi.encodeCall(TestableCrowdfund.initialize, (
                Crowdfund.CrowdfundOptions({
                    name: defaultName,
                    symbol: defaultSymbol,
                    splitRecipient: defaultSplitRecipient,
                    splitBps: defaultSplitBps,
                    initialContributor: initialContributor,
                    initialDelegate: initialDelegate,
                    gateKeeper: defaultGateKeeper,
                    gateKeeperId: defaultGateKeeperId,
                    governanceOpts: defaultGovernanceOpts
                })
            ))
        )));
    }

    function _createCrowdfund(uint256 initialContribution)
        private
        returns (TestableCrowdfund cf)
    {
        return _createCrowdfund(initialContribution, address(this), defaultInitialDelegate);
    }

    function _createExpectedPartyOptions(TestableCrowdfund cf, uint256 finalPrice)
        private
        view
        returns (Party.PartyOptions memory opts)
    {
        Crowdfund.FixedGovernanceOpts memory govOpts = cf.getFixedGovernanceOpts();
        return Party.PartyOptions({
            name: defaultName,
            symbol: defaultSymbol,
            governance: PartyGovernance.GovernanceOpts({
                hosts: govOpts.hosts,
                voteDuration: govOpts.voteDuration,
                executionDelay: govOpts.executionDelay,
                passThresholdBps: govOpts.passThresholdBps,
                totalVotingPower: uint96(finalPrice),
                feeBps: defaultGovernanceOpts.feeBps,
                feeRecipient: defaultGovernanceOpts.feeRecipient
            })
        });
    }

    function _getAmountWithoutSplit(uint256 contribution)
        private
        view
        returns (uint256 r)
    {
        return (uint256(1e4 - defaultSplitBps) * contribution) / 1e4;
    }

    function _getAmountWithSplit(uint256 contribution, uint256 totalContributions)
        private
        view
        returns (uint256 r)
    {
        return _getAmountWithoutSplit(contribution) +
            (uint256(defaultSplitBps) * totalContributions + (1e4 - 1)) / 1e4;
    }

    function test_creation_initialContribution_withDelegate() public {
        _expectEmit0();
        address initialContributor = _randomAddress();
        address initialDelegate = _randomAddress();
        uint256 initialContribution = _randomRange(1, 1 ether);
        vm.deal(address(this), initialContribution);
        emit Contributed(initialContributor, initialContribution, initialDelegate, 0);
        TestableCrowdfund cf = _createCrowdfund(
            initialContribution,
            initialContributor,
            initialDelegate
        );
        (
            uint256 ethContributed,
            uint256 ethUsed,
            uint256 ethOwed,
            uint256 votingPower
        ) = cf.getContributorInfo(initialContributor);
        assertEq(ethContributed, initialContribution);
        assertEq(ethUsed, 0);
        assertEq(ethOwed, 0);
        assertEq(votingPower, 0);
        assertEq(uint256(cf.totalContributions()), initialContribution);
        assertEq(cf.delegationsByContributor(initialContributor), initialDelegate);
    }

    function test_creation_initialContribution_noValue() public {
        address initialContributor = _randomAddress();
        TestableCrowdfund cf = _createCrowdfund(0, initialContributor, initialContributor);
        (
            uint256 ethContributed,
            uint256 ethUsed,
            uint256 ethOwed,
            uint256 votingPower
        ) = cf.getContributorInfo(initialContributor);
        assertEq(ethContributed, 0);
        assertEq(ethUsed, 0);
        assertEq(ethOwed, 0);
        assertEq(votingPower, 0);
        assertEq(uint256(cf.totalContributions()), 0);
        assertEq(cf.delegationsByContributor(initialContributor), address(0));
    }

    // One person contributes, their entire contribution is used.
    function testWin_oneContributor() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address payable contributor1 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        assertEq(cf.totalContributions(), 1e18);
        // set up a win using contributor1's total contribution
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        vm.expectEmit(false, false, false, true);
        emit MockPartyFactoryCreateParty(
            address(cf),
            address(cf),
            _createExpectedPartyOptions(cf, 1e18),
            erc721Tokens,
            erc721TokenIds
        );
        Party party_ = cf.testSetWon(
            1e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        assertEq(address(party_), address(party));
        // contributor1 burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            contributor1,
            1e18,
            delegate1
        );
        cf.burn(contributor1);
        // contributor1 gets back none of their contribution
        assertEq(contributor1.balance, 0);
    }

    // Two contributors, their entire combined contribution is used.
    function testWin_twoContributors() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address delegate2 = _randomAddress();
        address payable contributor1 = _randomAddress();
        address payable contributor2 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // contributor2 contributes 0.5 ETH
        vm.deal(contributor2, 0.5e18);
        vm.prank(contributor2);
        cf.contribute{ value: contributor2.balance }(delegate2, "");
        assertEq(cf.totalContributions(), 1.5e18);
        // set up a win using everyone's total contributions
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        vm.expectEmit(false, false, false, true);
        emit MockPartyFactoryCreateParty(
            address(cf),
            address(cf),
            _createExpectedPartyOptions(cf, 1.5e18),
            erc721Tokens,
            erc721TokenIds
        );
        Party party_ = cf.testSetWon(
            1.5e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        assertEq(address(party_), address(party));
        // contributor1 burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            contributor1,
            1e18,
            delegate1
        );
        cf.burn(contributor1);
        // contributor1 gets back none of their contribution
        assertEq(contributor1.balance, 0);
        // contributor2 burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            contributor2,
            0.5e18,
            delegate2
        );
        cf.burn(contributor2);
        // contributor2 gets back none of their contribution
        assertEq(contributor2.balance, 0);
    }

    // two contribute but only part of the second contributor's ETH is used.
    function testWin_twoContributors_partialContributionUsed() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address delegate2 = _randomAddress();
        address payable contributor1 = _randomAddress();
        address payable contributor2 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // contributor2 contributes 0.5 ETH
        vm.deal(contributor2, 0.5e18);
        vm.prank(contributor2);
        cf.contribute{ value: contributor2.balance }(delegate2, "");
        // set up a win using half of contributor2's total contributions
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        vm.expectEmit(false, false, false, true);
        emit MockPartyFactoryCreateParty(
            address(cf),
            address(cf),
            _createExpectedPartyOptions(cf, 1.25e18),
            erc721Tokens,
            erc721TokenIds
        );
        cf.testSetWon(
            1.25e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        // contributor1 burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            contributor1,
            1e18,
            delegate1
        );
        cf.burn(contributor1);
        // contributor1 gets back none of their contribution
        assertEq(contributor1.balance, 0);
        // contributor2 burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            contributor2,
            0.25e18,
            delegate2
        );
        cf.burn(contributor2);
        // contributor2 gets back half their contribution
        assertEq(contributor2.balance, 0.25e18);
    }

    // two contribute, with contributor1 sandwiching contributor2
    // and only part of the total is used.
    function testWin_twoContributorsSandiwched_partialContributionUsed() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address delegate2 = _randomAddress();
        address payable contributor1 = _randomAddress();
        address payable contributor2 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // contributor2 contributes 0.5 ETH
        vm.deal(contributor2, 0.5e18);
        vm.prank(contributor2);
        cf.contribute{ value: contributor2.balance }(delegate2, "");
        // contributor1 contributes 0.25 ETH
        vm.deal(contributor1, 0.25e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // set up a win using half of contributor2's total contributions
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        vm.expectEmit(false, false, false, true);
        emit MockPartyFactoryCreateParty(
            address(cf),
            address(cf),
            _createExpectedPartyOptions(cf, 1.65e18),
            erc721Tokens,
            erc721TokenIds
        );
        cf.testSetWon(
            1.65e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        // contributor1 burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            contributor1,
            1.15e18,
            delegate1
        );
        cf.burn(contributor1);
        // contributor1 gets back some of their second contribution
        assertEq(contributor1.balance, 0.1e18);
        // contributor2 burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            contributor2,
            0.5e18,
            delegate2
        );
        cf.burn(contributor2);
        // contributor2 gets back none of their contribution
        assertEq(contributor2.balance, 0);
    }

    // One person contributes, final price is zero (should never happen IRL)
    function testWin_oneContributor_zeroFinalPrice() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address payable contributor1 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        assertEq(cf.totalContributions(), 1e18);
        // set up a win with 0 final price
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        vm.expectEmit(false, false, false, true);
        emit MockPartyFactoryCreateParty(
            address(cf),
            address(cf),
            _createExpectedPartyOptions(cf, 0),
            erc721Tokens,
            erc721TokenIds
        );
        Party party_ = cf.testSetWon(
            0,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        assertEq(address(party_), address(party));
        // contributor1 burns tokens
        vm.expectEmit(false, false, false, true);
        emit Burned(
            contributor1,
            0,
            1e18,
            0
        );
        cf.burn(contributor1);
        // contributor1 gets back all of their contribution
        assertEq(contributor1.balance, 1e18);
    }

    // Two contributors, CF loses
    function testLoss_twoContributors() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address delegate2 = _randomAddress();
        address payable contributor1 = _randomAddress();
        address payable contributor2 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // contributor2 contributes 0.5 ETH
        vm.deal(contributor2, 0.5e18);
        vm.prank(contributor2);
        cf.contribute{ value: contributor2.balance }(delegate2, "");
        assertEq(cf.totalContributions(), 1.5e18);
        // set up a loss
        cf.testSetLifeCycle(Crowdfund.CrowdfundLifecycle.Lost);
        assertEq(address(cf.party()), address(0));
        // contributor1 burns tokens
        vm.expectEmit(false, false, false, true);
        emit Burned(contributor1, 0, 1e18, 0);
        cf.burn(contributor1);
        // contributor1 gets back their contribution
        assertEq(contributor1.balance, 1e18);
        // contributor2 burns tokens
        vm.expectEmit(false, false, false, true);
        emit Burned(contributor2, 0, 0.5e18, 0);
        cf.burn(contributor2);
        // contributor2 gets back their contribution
        assertEq(contributor2.balance, 0.5e18);
    }

    // One person contributes, their entire contribution is used, they try to burn twice.
    function testWin_oneContributor_cannotBurnTwice() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address payable contributor1 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // set up a win using contributor1's total contribution
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        cf.testSetWon(
            1e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        // contributor1 burns tokens
        cf.burn(contributor1);
        // They try to burn again.
        vm.expectRevert(abi.encodeWithSelector(
            CrowdfundNFT.AlreadyBurnedError.selector,
            contributor1,
            uint256(uint160(address(contributor1)))
        ));
        cf.burn(contributor1);
    }

    // One person contributes, part of their contribution is used, they try to burn twice.
    function testWin_oneContributor_partialContributionUsed_cannotBurnTwice() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address payable contributor1 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // set up a win using contributor1's total contribution
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        cf.testSetWon(
            0.5e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        // contributor1 burns tokens
        cf.burn(contributor1);
        // contributor1 gets back part of their contribution
        assertEq(contributor1.balance, 0.5e18);
        // They try to burn again.
        vm.expectRevert(abi.encodeWithSelector(
            CrowdfundNFT.AlreadyBurnedError.selector,
            contributor1,
            uint256(uint160(address(contributor1)))
        ));
        cf.burn(contributor1);
    }

    // One person contributes, CF loses, they try to burn twice.
    function testLoss_oneContributor_cannotBurnTwice() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address payable contributor1 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // Set up a loss.
        cf.testSetLifeCycle(Crowdfund.CrowdfundLifecycle.Lost);
        assertEq(address(cf.party()), address(0));
        // contributor1 burns tokens
        cf.burn(contributor1);
        // contributor1 gets back their contribution
        assertEq(contributor1.balance, 1e18);
        // They try to burn again.
        vm.expectRevert(abi.encodeWithSelector(
            CrowdfundNFT.AlreadyBurnedError.selector,
            contributor1,
            uint256(uint160(address(contributor1)))
        ));
        cf.burn(contributor1);
    }

    // One person contributes, CF is busy, they try to burn.
    function testBusy_oneContributor_cannotBurn() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address payable contributor1 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // Set up a loss.
        cf.testSetLifeCycle(Crowdfund.CrowdfundLifecycle.Busy);
        // They try to burn again.
        vm.expectRevert(abi.encodeWithSelector(
            Crowdfund.WrongLifecycleError.selector,
            Crowdfund.CrowdfundLifecycle.Busy
        ));
        cf.burn(contributor1);
    }

    // Trying to pass in different governance opts after winning.
    function testWin_cannotChangeGovernanceOpts() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        // set up a win using contributor1's total contribution
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        unchecked {
            uint256 r = _randomUint256() % 4;
            if (r == 0) {
                defaultGovernanceOpts.hosts[0] = _randomAddress();
            } else if (r == 1) {
                defaultGovernanceOpts.voteDuration += 1;
            } else if (r == 2) {
                defaultGovernanceOpts.executionDelay += 1;
            } else if (r == 3) {
                defaultGovernanceOpts.passThresholdBps += 1;
            }
        }
        vm.expectRevert(Crowdfund.InvalidGovernanceOptionsError.selector);
        cf.testSetWon(
            1e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
    }

    // Split recipient set but does not contribute.
    // Half of contributor's contribution used.
    function testWin_nonParticipatingSplitRecipient() public {
        address payable splitRecipient = _randomAddress();
        defaultSplitRecipient = splitRecipient;
        TestableCrowdfund cf = _createCrowdfund(0);

        address delegate1 = _randomAddress();
        address payable contributor1 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // set up a win using half of contributor1's total contribution
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        cf.testSetWon(
            0.5e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        // contributor1 burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            contributor1,
            _getAmountWithoutSplit(0.5e18),
            delegate1 // will use last contribute() delegate
        );
        cf.burn(contributor1);
        // contributor1 gets back half of their contribution
        assertEq(contributor1.balance, 0.5e18);
        // split recipient burns
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            splitRecipient,
            _getAmountWithSplit(0, 0.5e18),
            splitRecipient
        );
        cf.burn(splitRecipient);
    }

    // Split recipient set and contributes.
    // All of contributor1's contrubtion used.
    // Part of split recipient's contribution used.
    function testWin_participatingSplitRecipient_splitRecipientContributionPartiallyUsed() public {
        address payable splitRecipient = _randomAddress();
        defaultSplitRecipient = splitRecipient;
        TestableCrowdfund cf = _createCrowdfund(0);

        address delegate1 = _randomAddress();
        address delegate2 = _randomAddress();
        address payable contributor1 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // recipient contributes 0.5 ETH
        vm.deal(splitRecipient, 0.5e18);
        vm.prank(splitRecipient);
        cf.contribute{ value: splitRecipient.balance }(delegate2, "");
        // set up a win using half of split recipient's total contribution
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        cf.testSetWon(
            1.25e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        // contributor1 burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            contributor1,
            _getAmountWithoutSplit(1e18),
            delegate1 // will use last contribute() delegate
        );
        cf.burn(contributor1);
        // contributor1 gets back none of their contribution
        assertEq(contributor1.balance, 0);
        // split recipient burns
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            splitRecipient,
            _getAmountWithSplit(0.25e18, 1.25e18),
            delegate2
        );
        cf.burn(splitRecipient);
    }

    // Split recipient set and contributes.
    // All of contributor1's contrubtion used.
    // NONE of split recipient's contribution used.
    function testWin_participatingSplitRecipient_splitRecipientContributionNotUsed() public {
        address payable splitRecipient = _randomAddress();
        defaultSplitRecipient = splitRecipient;
        TestableCrowdfund cf = _createCrowdfund(0);

        address delegate1 = _randomAddress();
        address delegate2 = _randomAddress();
        address payable contributor1 = _randomAddress();
        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        // recipient contributes 0.5 ETH
        vm.deal(splitRecipient, 0.5e18);
        vm.prank(splitRecipient);
        cf.contribute{ value: splitRecipient.balance }(delegate2, "");
        // set up a win using none of split recipient's total contribution
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        cf.testSetWon(
            1e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        // contributor1 burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            contributor1,
            _getAmountWithoutSplit(1e18),
            delegate1 // will use last contribute() delegate
        );
        cf.burn(contributor1);
        // contributor1 gets back none of their contribution
        assertEq(contributor1.balance, 0);
        // split recipient burns
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            splitRecipient,
            _getAmountWithSplit(0, 1e18),
            delegate2
        );
        cf.burn(splitRecipient);
    }

    // Two contributors, one is blocked
    function test_twoContributors_oneBlockedByGateKeeper() public {
        address delegate1 = _randomAddress();
        address delegate2 = _randomAddress();
        address payable contributor1 = _randomAddress();
        address payable contributor2 = _randomAddress();

        AllowListGateKeeper gk = new AllowListGateKeeper();
        bytes12 gateId = gk.createGate(keccak256(abi.encodePacked(contributor1)));
        defaultGateKeeper = gk;
        defaultGateKeeperId = gateId;
        TestableCrowdfund cf = _createCrowdfund(0);

        // contributor1 contributes 1 ETH
        vm.deal(contributor1, 1e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, abi.encode(new bytes32[](0)));

        // contributor2 contributes 0.5 ETH but will be blocked by the gatekeeper.
        vm.deal(contributor2, 0.5e18);
        vm.prank(contributor2);
        vm.expectRevert(abi.encodeWithSelector(
            Crowdfund.NotAllowedByGateKeeperError.selector,
            contributor2,
            defaultGateKeeper,
            gateId,
            abi.encode(new bytes32[](0))
        ));
        cf.contribute{ value: contributor2.balance }(delegate2, abi.encode(new bytes32[](0)));
    }

    function testBurn_failMintingGovNFT() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address payable badERC721Receiver = payable(new BadERC721Receiver());
        // badERC721Receiver contributes 1 ETH
        vm.deal(badERC721Receiver, 1e18);
        vm.prank(badERC721Receiver);
        cf.contribute{ value: badERC721Receiver.balance }(delegate1, "");
        assertEq(cf.totalContributions(), 1e18);
        // set up a win using badERC721Receiver's total contribution
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        vm.expectEmit(false, false, false, true);
        emit MockPartyFactoryCreateParty(
            address(cf),
            address(cf),
            _createExpectedPartyOptions(cf, 1e18),
            erc721Tokens,
            erc721TokenIds
        );
        Party party_ = cf.testSetWon(
            1e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        assertEq(address(party_), address(party));
        // badERC721Receiver burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            address(cf), // Gov NFT was minted to crowdfund to escrow
            1e18,
            delegate1
        );
        cf.burn(badERC721Receiver);
        assertEq(party.balanceOf(badERC721Receiver), 0);
        assertEq(party.balanceOf(address(cf)), 1);

        // Expect revert if claiming to bad receiver
        vm.prank(badERC721Receiver);
        vm.expectRevert();
        cf.claim(badERC721Receiver);

        address payable receiver = payable(_randomAddress());
        vm.prank(badERC721Receiver);
        cf.claim(receiver);
        assertEq(party.balanceOf(receiver), 1);
        assertEq(party.balanceOf(address(cf)), 0);

        // Check that claim is now cleared
        (uint256 refund, uint256 governanceTokenId) = cf.claims(badERC721Receiver);
        assertEq(refund, 0);
        assertEq(governanceTokenId, 0);
    }

    function testBurn_failRefundingETH() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        address delegate1 = _randomAddress();
        address payable badETHReceiver = payable(address(new BadETHReceiver()));
        // badETHReceiver contributes 2 ETH
        vm.deal(badETHReceiver, 2e18);
        vm.prank(badETHReceiver);
        cf.contribute{ value: badETHReceiver.balance }(delegate1, "");
        assertEq(cf.totalContributions(), 2e18);
        // set up a win using badETHReceiver's total contribution
        (IERC721[] memory erc721Tokens, uint256[] memory erc721TokenIds) =
            _createTokens(address(cf), 2);
        vm.expectEmit(false, false, false, true);
        emit MockPartyFactoryCreateParty(
            address(cf),
            address(cf),
            _createExpectedPartyOptions(cf, 1e18),
            erc721Tokens,
            erc721TokenIds
        );
        Party party_ = cf.testSetWon(
            1e18,
            defaultGovernanceOpts,
            erc721Tokens,
            erc721TokenIds
        );
        assertEq(address(party_), address(party));
        // badETHReceiver burns tokens
        vm.expectEmit(false, false, false, true);
        emit MockMint(
            address(cf),
            badETHReceiver,
            1e18,
            delegate1
        );
        cf.burn(badETHReceiver);
        assertEq(badETHReceiver.balance, 0);

        // Expect revert if claiming to bad receiver
        vm.prank(badETHReceiver);
        vm.expectRevert(abi.encodeWithSelector(
            LibAddress.EthTransferFailed.selector,
            badETHReceiver,
            ""
        ));
        cf.claim(badETHReceiver);

        address payable receiver = payable(_randomAddress());
        vm.prank(badETHReceiver);
        cf.claim(receiver);
        assertEq(receiver.balance, 1e18);
        assertEq(badETHReceiver.balance, 0);

        // Check that claim is now cleared
        (uint256 refund, uint256 governanceTokenId) = cf.claims(badETHReceiver);
        assertEq(refund, 0);
        assertEq(governanceTokenId, 0);
    }

    function testClaim_nothingToClaim() public {
        TestableCrowdfund cf = _createCrowdfund(0);
        vm.expectRevert(abi.encodeWithSelector(
            Crowdfund.NothingToClaimError.selector
        ));
        cf.claim(_randomAddress());
    }

    function test_revertIfNullContributor() public {
        Implementation impl = Implementation(new TestableCrowdfund(globals));
        // Attempt creating a crowdfund and setting a null address as the
        // initial contributor. Should revert when it attempts to mint a
        // contributor NFT to `address(0)`.
        vm.expectRevert(CrowdfundNFT.InvalidAddressError.selector);
        TestableCrowdfund(payable(new Proxy{ value: 1 ether }(
            impl,
            abi.encodeCall(TestableCrowdfund.initialize, (
                Crowdfund.CrowdfundOptions({
                    name: defaultName,
                    symbol: defaultSymbol,
                    splitRecipient: defaultSplitRecipient,
                    splitBps: defaultSplitBps,
                    initialContributor: address(0),
                    initialDelegate: address(this),
                    gateKeeper: defaultGateKeeper,
                    gateKeeperId: defaultGateKeeperId,
                    governanceOpts: defaultGovernanceOpts
                })
            ))
        )));
    }

    // test nft renderer
    function test_nftRenderer() public {
        TestableCrowdfund cf = _createCrowdfund(0);

        address delegate1 = _randomAddress();
        address payable contributor1 = _randomAddress();
        // contributor1 contributes
        vm.deal(contributor1, 123.45e18);
        vm.prank(contributor1);
        cf.contribute{ value: contributor1.balance }(delegate1, "");
        string memory tokenURI = cf.tokenURI(uint256(uint160(address(contributor1))));

        // Uncomment for testing rendering:
        // console.log(tokenURI);

        assertTrue(bytes(tokenURI).length > 0);
    }

    function test_contractURI() external {
        TestableCrowdfund cf = _createCrowdfund(0);

        string memory contractURI = cf.contractURI();

        // Uncomment for testing rendering:
        // console.log(contractURI);

        assertTrue(bytes(contractURI).length > 0);
    }

    function test_supportsInterface() external {
        TestableCrowdfund cf = _createCrowdfund(0);
        cf.supportsInterface(0x01ffc9a7); // EIP165
        cf.supportsInterface(0x80ac58cd); // ERC721
        cf.supportsInterface(0x150b7a02); // ERC721Receiver
    }
}
